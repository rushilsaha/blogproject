schema {
  query: Root
  mutation: Mutation
}

input AddCommentInput {
  text: String!
  postId: String!
  clientMutationId: String
}

type AddCommentPayload {
  commentEdge: CommentEdge
  post: Post
  clientMutationId: String
}

type Category implements Node {
  id: ID!
  text: String
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]
}

type CategoryEdge {
  node: Category
  cursor: String!
}

type Comment implements Node {
  id: ID!
  text: String
  date: String
  like: Int
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]
}

type CommentEdge {
  node: Comment
  cursor: String!
}

input LikeCommentInput {
  id: ID!
  clientMutationId: String
}

type LikeCommentPayload {
  comment: Comment
  clientMutationId: String
}

type Mutation {
  addComment(input: AddCommentInput!): AddCommentPayload
  removeComment(input: RemoveCommentInput!): RemoveCommentPayload
  likeComment(input: LikeCommentInput!): LikeCommentPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!
  title: String
  className: String
  text: String
  date: String
  categoryId: String
  comments(postId: String = "", after: String, first: Int, before: String, last: Int): CommentConnection
  newer: String
  older: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]
}

type PostEdge {
  node: Post
  cursor: String!
}

input RemoveCommentInput {
  id: ID!
  postId: ID!
  clientMutationId: String
}

type RemoveCommentPayload {
  deletedCommentId: ID
  post: Post
  clientMutationId: String
}

type Root {
  viewer: User
  node(id: ID!): Node
}

type User implements Node {
  id: ID!
  posts(id: String = "", after: String, first: Int, before: String, last: Int): PostConnection
  categories(status: String = "any", after: String, first: Int, before: String, last: Int): CategoryConnection
}
